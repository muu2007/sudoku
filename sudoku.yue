import 'macros' as {$}
_G.PROJECTNAME, _G.VERSION = $FILE\sub(1,-5), "0.1a(#{$DATE})"
-- import 'utf8'
import 'lib.lume'
import 'utl' as :pos_in_box, :align, :play
import 'lib.maid64' -- 改造して高解像度を初期値にした
import 'color' as --[[:hsv,]] :sweetie16
-- import 'lib.gifcat' -- gifcat.luaもprojectrootに置く? 全部に?入れているので、ここ消すだけで使わなくなる
import 'ui' as :Scene, :Overlay, :SelectBox, :SelectBoxScroll, :Watchdog--, :blur5x5_code
import 'input' as :input, :SoftKeyboard
import 'lib.tween' -- 改造してdelayを可能にした
import '数独' as :solve, :generate--{solve0: solve, generate: generate}
import 'sudoku_stagedata' as stagedata
vudu = if DEBUGMODE then require 'lib.vudu' else nil
inspect = if DEBUGMODE then require 'lib.inspect' else nil
-- local *

love.window.setTitle(PROJECTNAME .. ' - v' .. VERSION)
love.window.setMode(600, 921, {resizable: true}) -- レトロ画面をコピーするだけならanti alias不要。gamepad描いているのでmsaaつけた
maid64.setup(600, 921)
love.mouse.getPosition0 = love.mouse.getPosition -- 保存
love.mouse.getPosition = maid64.mouse.getPosition -- プログラム全体としてmaid64の座標系を使うことにする
love.touch.getPosition0 or= love.touch.getPosition -- 保存
love.touch.getPosition = (id)-> maid64.transformPosition(love.touch.getPosition0(id))
love.audio.setVolume(0.3)
-- os.lang = nil -- i18nを無効
-- if love.system.hasBackgroundMusic() then love.audio.toggleMute() --うまく動いてない
-- BGM'assets/sounds/052622ineedtogetouttahere_32k.mp3'


do -- load the savedata
	savedata = if love.filesystem.getInfo(PROJECTNAME..'.save') then lume.deserialize(love.filesystem.read(PROJECTNAME..'.save') or '{}') else {}
	stagedata[i].cleartime = t for i, {cleartime: t} in ipairs savedata

save = ->
	love.filesystem.write(PROJECTNAME..'.save', lume.serialize([{cleartime: t} for {cleartime: t} in *stagedata]))


class Game extends Scene
	@Layout = do
		s = align.div_h(align.enlarge({0,0,maid64.sizeX,maid64.sizeY}, -10, -10), {0.7, 2, 0.1, 1.3, 0.2, 19, 0.2, 1.3, 5})
		s2 = align.div_v(s[2], {0.1, 5, 2, 3.5, 2, 3.5, 18})
		{ toolbar: s[2]
		back: s2[2]
		solve: s2[4]
		volume: s2[6]
		time: align.right(s[4], 300)
		field: s[6]
		author: s[8]
		}
	new: (@id)=>
		@field = [ [(if 0==c then {} else c) for c in *row] for row in *stagedata[id].field]
		@keycursor = {1,1, visible: false} -- キーボード操作用
		@time = 0 -- Resultでは止めたいのでstartとlove.timer.getTimeではダメ
		super()
		@keyboard = SoftKeyboard(SoftKeyboard.buildButtons{
			'appback': {@@Layout.back[1]+idiv(@@Layout.back[3],2), @@Layout.back[2]+idiv(@@Layout.back[3],2), idiv(@@Layout.back[3], 2), "", 60},
			'f9': {@@Layout.solve[1]+idiv(@@Layout.solve[3],2), @@Layout.solve[2]+idiv(@@Layout.solve[3],2), idiv(@@Layout.solve[3],2), ''--[[']] --[["解"]], 60},
			'm': {@@Layout.volume[1]+idiv(@@Layout.volume[3],2), @@Layout.volume[2]+idiv(@@Layout.volume[3],2), idiv(@@Layout.volume[3],2), ''--[["音"]]}}, gr.newFlyweightFont($FONT2, 46))

	getIndexPos: =>
		x, y = love.mouse.getPosition()
		if pos_in_box({x, y}, @@Layout.field) -- else では nil, nil が返る
			lume.clamp(((x-@@Layout.field[1]) |>idiv @@Layout.field[3]/9)+1, 1, 9), lume.clamp(((y-@@Layout.field[2]) |>idiv @@Layout.field[4]/9)+1, 1, 9)

	iswin: =>
		isvalid = (x, y)->
			return false if 9 != #lume.unique([(if 'number' == type c then c else c[1]) for c in *@field[y]])
			return false if 9 != #lume.unique([(if 'number' == type row[x] then row[x] else row[x][1]) for row in *@field])
			sx, sy =  rawget({1,1,1,4,4,4,7,7,7}, x), rawget({1,1,1,4,4,4,7,7,7}, y)
			return false if 9 != #lume.unique([(if 'number' == type @field[j][i] then @field[j][i] else @field[j][i][1]) for j=sy,sy+2 for i=sx,sx+2])
			true
		for y=1,9
			for x=1,9
				if 'number' == type @field[y][x] then continue
				if 1 != #@field[y][x] then return false
				if not isvalid(x, y) then return false
		true

	solve: =>
		ss = solve([lume.clone(row) for row in *stagedata[@id].field])
		@field = [ [(if c>0 then c else {ss[y][x]}) for x, c in ipairs row] for y, row in ipairs stagedata[@id].field]

	update: (dt)=>
		super(dt)
		if @iswin()
			stagedata[@id].cleartime = math.min(@time, stagedata[@id].cleartime or math.huge)
			save()
			@parent\setStageLabels?()
			@@Result()\attach()
		@time += dt
		return love.timer.sleep(2/60) if input.idletime>0 --and 'battery' == (love.system.getPowerInfo()) -- 省エネモード
		if ix, iy := @getIndexPos() -- 取れない場合は nil, nilを受け取る
			if input.MLBp() and 'table' == type @field[iy][ix]
				x, y = love.mouse.getPosition()
				@draggingbox = {ix, iy, 1, 1, value: 0, startpos: {x, y}, offset: if x < 88 then x elseif x > 512-56 then 144-(512-x) else 72}
				@update = @update_dragging
		@keyboard\update(dt)
		-- -- ここからはキーボード操作
		if d := input.arrowkeysp({{-1,0}, {0,-1}, {1,0}, {0,1}}, 10)
			@keycursor = {lume.clamp(@keycursor[1]+d[1], 1, 9), lume.clamp(@keycursor[2]+d[2], 1, 9), visible: true}
		if input.Ap() and 'table' == type @field[@keycursor[2]][@keycursor[1]]
			@draggingbox = {@keycursor[1], @keycursor[2], 1, 1, value: 0, startpos: {@@Layout.field[1]+(@keycursor[1]-.5)*@@Layout.field[3]/9, @@Layout.field[2]+(@keycursor[2]-.5)*@@Layout.field[4]/9}, offset: 72}
			@keycursor.visible = true
			@update = @update_dragging
		if SoftKeyboard.counters.appback >= 60
			@detach()
			SoftKeyboard.counters.appback =0
		if SoftKeyboard.counters.f9 >= 60
			print lume.time ->@solve()
			@time = 99*60+59
			SoftKeyboard.counters.f9 =0

	update_dragging: (dt)=>
		@time += dt
		@_static_old_value or= 0 -- カチカチ鳴らすため
		if input.MLB()
			x, y = love.mouse.getPosition()
			if @draggingbox.startpos[2] - y > 35
				@draggingbox.value = lume.clamp(math.floor((@draggingbox.offset-(@draggingbox.startpos[1]-x))/20)+1, 1, 9)
			else
				@draggingbox.value = 0
			if @_static_old_value != @draggingbox.value
				play'assets/sounds/効果音ラボ/カードを台の上に出す.mp3'
				@_static_old_value = @draggingbox.value
		for k in *{'1','2','3','4','5','6','7','8','9','kp1','kp2','kp3','kp4','kp5','kp6','kp7','kp8','kp9',}
			if love.keyboard.isDown(k)
				@draggingbox.value = tonumber(k\sub(-1))
		if (input.counters.MLB > 40 or input.counters.A > 40) and #@field[@draggingbox[2]][@draggingbox[1]] > 0 and @draggingbox.value == 0 -- 取り消し
			@field[@draggingbox[2]][@draggingbox[1]] = {}
			play'assets/sounds/効果音ラボ/キャンセル5.mp3'
			@@.CancelWave(@draggingbox[1], @draggingbox[2])
			@draggingbox = nil
			@update = nil
		elseif input.MLBr() or input.Ar() -- 数字を置く、または追加
			if @draggingbox.value != 0
				@field[@draggingbox[2]][@draggingbox[1]][] = @draggingbox.value
				@field[@draggingbox[2]][@draggingbox[1]] = lume.unique @field[@draggingbox[2]][@draggingbox[1]]
				play'assets/sounds/効果音ラボ/決定ボタンを押す42.mp3'
			@draggingbox = nil
			@update = nil

	keypressed: (key, _scancode, _isrepeat)=>
		switch key
			when 'appback' then SoftKeyboard.counters.appback += 1 --@detach()
			-- when 'f9'
			-- 	ss = solve([lume.clone(row) for row in *stagedata[@id].field])
			-- 	@field = [ [(if c>0 then c else {ss[y][x]}) for x, c in ipairs row] for y, row in ipairs stagedata[@id].field]
			-- 	@time = 99*60+59
			when 'm' then love.audio.toggleMute()

	draw: =>
		ox, oy, aw, ah = @@Layout.field[1], @@Layout.field[2], @@Layout.field[3]/9, @@Layout.field[4]/9
		gr.clear(gr.uipalette.base)
		if @update == @update_dragging
			gr.rectangle(gr.setColor(gr.uipalette.base2) or 'fill', ox+aw*(@draggingbox[1]-1), oy+aw*(@draggingbox[2]-1), aw, ah)
		gr.setColor(gr.uipalette.text)
		for w, s in ipairs {{1, 2, 4, 5, 7, 8}, {3, 6}, {0, 9}}
			gr.setLineWidth(w)
			gr.line(ox, oy+y*ah, ox+@@Layout.field[3], oy+y*ah) for y in *s
			gr.line(ox+x*aw, oy, ox+x*aw, oy+@@Layout.field[4]) for x in *s
		gr.setFont(gr.newFlyweightFont($FONT1, 30))
		for y, row in ipairs @field
			for x, c in ipairs row
				if 'number' == type c
					gr.print_center(gr.setColor(gr.uipalette.text) or gr.setFont(gr.newFlyweightFont($FONT1, 30)) or c, {ox+aw*(x-1), oy+ah*(y-1), aw, ah})
				else
					switch #c
						when 0 then lume.noop() -- continue でもいけた
						when 1 then gr.print_center(gr.setColor(gr.uipalette.selected) or gr.setFont(gr.newFlyweightFont($FONT1, 30)) or c[1], {ox+aw*(x-1), oy+ah*(y-1), aw, ah})
						else        gr.print_center(gr.setColor(gr.uipalette.selected) or gr.setFont(gr.newFlyweightFont($FONT1, 18)) or lume.reduce(c,(a,b)->a..b), {ox+aw*(x-1), oy+ah*(y-1), aw, ah/2})
		if @keycursor.visible then gr.rectangle(gr.setColor(gr.uipalette.text) or 'line', ox+aw*(@keycursor[1]-1)+4, oy+ah*(@keycursor[2]-1)+4, aw-8, ah-8)
		gr.printf(gr.setColor(gr.uipalette.text) or gr.setFont(gr.newFlyweightFont($FONT1)) or "%s %02d:%02d"\format(L'Time', @time |>idiv(60), @time % 60), @@Layout.time[1], @@Layout.time[2], @@Layout.time[3], 'right') -- :stopwatch: \u{23F1}
		gr.printf(L'author'..' '..text, @@Layout.author[1], @@Layout.author[2], @@Layout.author[3], 'right') if text := stagedata[@id].author
		-- gr.setColor(gr.uipalette.text
		@keyboard\draw()
		if 0 == love.audio.getVolume() then gr.print(gr.setFont(gr.newFlyweightFont($FONT2)) or gr.setColor(gr.uipalette.red) or '', @@Layout.volume[1]+32, @@Layout.volume[2])
		if @update == @update_dragging
			mx, my = love.mouse.getPosition()
			gr.circle(gr.setColor(gr.uipalette.selected) or 'line', mx, my-55, 10)
			-- box = {@@OX+aw*(@draggingbox[1]-1)-@draggingbox.offset, @@OY+aw*(@draggingbox[2]-1)-80, aw+100, 30}
			box = {@draggingbox.startpos[1]-@draggingbox.offset, @draggingbox.startpos[2]-120, 20*9--[[aw+100]], 40}
			gr.roundrect10(gr.setColor(gr.uipalette.base2) or 'fill', unpack box)
			gr.setScissor(unpack box)
			gr.setFont(gr.newFlyweightFont($FONT1))
			for i=1,9
				gr.setColor(if @draggingbox.value == i then gr.uipalette.selected else gr.uipalette.text)
				gr.print(i, box[1]+(i-1)*20, box[2])
			gr.setScissor()
		-- gr.rectangle('line', unpack b) for b in *{@@Layout.toolbar, @@Layout.time, @@Layout.field, @@Layout.author}

	class @CancelWave extends Overlay
		new: (x, y)=>
			@box = {Game.Layout.field[1]+(x-1)*Game.Layout.field[3]/9, Game.Layout.field[2]+(y-1)*Game.Layout.field[4]/9, Game.Layout.field[3]/9, Game.Layout.field[4]/9}
			@color = {...gr.uipalette.selected, [4]: .7}
			@tween = tween.new(.35, @, {box: align.enlarge(@box, 25), color: {...gr.uipalette.selected,[4]:0}}, 'outQuad')
			super()
		_update: (dt)=>
			while not @tween\update(dt)
				input.idletime = 0
				_, dt = coroutine.yield() -- １回目の呼び出しにselfが必要？なので揃える
		draw: =>
			gr.setColor(@color)
			gr.roundrect10('fill', unpack @box)

	class @Result extends SelectBox
		new: =>
			super({{text: '', box: {idiv(maid64.sizeX-460, 2), 0, 460, 300}, command: ()->@parent\detach(), state4index: {} }})
			play 'assets/sounds/効果音ラボ/決定ボタンを押す21.mp3'
		-- predrawback: =>
		-- 	gr.setShader(blur5x5shader)
		-- 	gr.setColor(.5,.5,.5,1)
		draw: =>
			-- gr.setShader()
			-- gr.rectangle(gr.setColor(0,0,0,.1) or 'fill', 0, 0, maid64.sizeX, maid64.sizeY) -- 暗くする(外側まで)
			-- c0, _ = gr.getCanvas(), gr.setCanvas()
			-- gr.rectangle(gr.setColor(0,0,0,.1) or 'fill', 0, 0, gr.getWidth(), gr.getHeight())
			-- gr.setCanvas(c0)
			@_tween1 or= tween.new(.5, @buttons[1].box, {[2]: 200} ) -- static変数っぽくインスタンス変数を使う。draw内だけでアニメーション
			@_tween1\update(1/60)
			-- gr.rectangle(gr.setColor(gr.uipalette.base) or 'fill', unpack @buttons[1].box)
			-- gr.rectangle(gr.setColor(hsv(love.timer.getTime()*3, .8, .8)) or 'line', unpack @buttons[1].box)
			font0, _ = gr.getFont(), gr.setFont(gr.newFlyweightFont($FONT1, 48))
			gr.print_center(gr.setColor({...gr.uipalette.text, [4]: .5+.5*lume.pingpong(love.timer.getTime())}) or "Clear!!", @buttons[1].box |> align.top(0.6))
			gr.print_center(--[[gr.setColor(gr.uipalette.text) or]] "✗", @buttons[1].box |> align.bottom(0.3))
			gr.setFont(font0)

class Title extends SelectBox
	new: =>
		super(@@.buildButtons({"[→19]ステージ", "[→19][｜]説明[せつめい]"}, align.div_v({10,205,maid64.sizeX-20,36}, 2), [(->) for _=1,2], @@.buildState4Indexes(2, 2)))
		@stagelist = SelectBoxScroll(@@.buildButtons(
			['' for _=1, #stagedata],
			[{0,36*i,470,36} for i=0, #stagedata-1],
			[(-> Game(i)\attach()) for i=1, #stagedata]
		), {21, 260, 470, 470})
		@setStageLabels()
		@keyboard = SoftKeyboard({'appback': {50, 40, 28, '◀'}, 'f9': {120, 30, 20, "撮"--[[\u{1f4f7}]]}, 'f6': {175, 30, 20, "貼"--[[\u{1f4cb}]]}, 'm': {220, 30, 20, "音"}})
		-- @keyboard = SoftKeyboard({'appback': {50, 40, 28, '\u{1f519}'}, 'f9': {120, 30, 20, '\u{1f4f7}'}, 'f6': {175, 30, 20, '\u{1f4cb}'}, 'm': {220, 30, 20, '\u{1f508}'}}, gr.newFlyweightFont($FONT2))
	setStageLabels: =>
		-- @stagelist.buttons[i].text = "[→9]%s #%02d  [@%s;16]作者:[@] %-20s\n[↓-36][→375]%s"\format((if e.cleartime then '[#22cc22]\u{2611}[#]'else'[#444444]\u{2610}[#]'), i, $FONT1(), (if e.author then e.author else ''), (if e.cleartime then '%02d:%02d'\format(e.cleartime/60, e.cleartime % 60) else '--:--')) for i, e in ipairs stagedata
		@stagelist.buttons[i].text = "[→9]%s #%02d  作者: %-20s\n[↓-36][→375]%s"\format((if e.cleartime then '[#22cc22]\u{2611}[#]'else'[#444444]\u{2610}[#]'), i, (if e.author then e.author else ''), (if e.cleartime then '%02d:%02d'\format(e.cleartime/60, e.cleartime % 60) else '--:--')) for i, e in ipairs stagedata
	update: (dt)=>
		-- return if input.idletime>0 --and 'battery' == (love.system.getPowerInfo()) -- 省エネモード
		super(dt)
		if 1 == @index
			@stagelist\update(dt)
		@keyboard\update(dt)
	wheelmoved: (x, y)=>
		super(x, 0) -- チルトホイールマウス持ってないが
		@stagelist\wheelmoved(0, y)
	keypressed: (key, scancode, isrepeat)=>
		super(key, scancode, isrepeat)
		-- if 1 == @index -- tab/s-tabはstagelistに伝播させない
		-- 	@stagelist\keypressed(key, scancode, isrepeat)
		switch key
			when 'appback' then lume.noop()--@detach()
			when 'f9' then @@.AutoScreenshot()
			when 'm' then love.audio.toggleMute()
	filedropped: (file)=>
		if DEBUGMODE
			file\open('r')
			content = file\read()
			game = Game(1)\attach()
			game.field = [(if 0x20==c then 0 else c-0x30) for _, c in utf8.codes lume.split(content)] -- authorが変更できないがこのままでもいいか
	draw: =>
		maid64.clearBG()
		-- gr.draw(gr.setColor(1,1,1) or gr.newFlyweightImage('assets/shikaku.jpg'), 10, 80, 0, 0.8)
		-- gr.setFont(gr.newFlyweightFont($FONT1)) --24
		gr.setColor(gr.uipalette.text)
		@keyboard\draw()
		if 0 == love.audio.getVolume() then gr.print(gr.setFont(gr.newFlyweightFont($FONT2)) or gr.setColor(gr.uipalette.red) or '\u{1f6ab}', @keyboard.buttons.m[1]-25, @keyboard.buttons.m[2]-25)
		gr.setFont(gr.newFlyweightFont($FONT1)) --24
		super()
		if 1 == @index
			@stagelist\draw()
		elseif 2 == @index
			gr.rectangle(gr.setColor(gr.uipalette.base2) or 'fill', 31, 260, 450, 500)
			gr.setColor(gr.uipalette.text)
			gr.draw_text("[#{sweetie16.<>.Blue}]ルール[#]
① 点線の上にタテヨコに線を引き、[｜]盤面[ばんめん]を
いくつかの[｜]長方形[ちょうほうけい]に分けましょう。
② どの長方形にも数字が一つずつ入る
ようにします。
③ 数字は１マスの面積を１としたとき
の面積を表しています。
[#{sweetie16.<>.Blue}]操作方法[#]
", 31, 260)


	class @AutoScreenshot extends Overlay
		_update: (_)=>
			for i = 1, #stagedata
				Game(i)\attach() -- stagelistからgui-automationでやるのは出来なかった
				-- love.keypressed('f9')
				time = 1.5
				while time > 0
					_, dt = coroutine.yield()
					time -= dt
				love.keypressed('appback')

class Title2 extends SelectBox
	@Layout = do
		s = align.div_h(align.enlarge({0, 0, maid64.sizeX, maid64.sizeY}, -20, -10), {1, 4, 2, 3, 15})
		{
		title: s[2]
		levels: align.div_h(s[4], 2) |> (=> [align.enlarge(b, -4, -4) for b in *{...align.div_v(@[1], 3), ...align.div_v(@[2], 3)}])
		}
	new: =>
		super(@@.buildButtons({L'Level'..1, L'Level'..2, L'Level'..3, L'Level'..4, L'Level'..5, L'Level'..6}, @@Layout.levels, {(->@generate(30)), (->@generate(40)), (->@generate(45)), (->@generate(50)), (->@generate(55)), (->@generate(58)) }))
		@font = gr.newFlyweightFont($FONT1)--, 40)
	update: (dt)=>
		-- print dt
		-- vudu?.graphics.drawText({0,0,0}, 0, 20, 20, 2^vudu.timeScale)
		super(dt)
		-- if nil == love.window.fullscreen_offset_x and nil == love.window.fullscreen_offset_y and love.window.getFullscreen() and 'Web' == love.system.getOS()
		-- 	w, h = gr.getDimensions()
		-- 	sw, sh = love.window.getDesktopDimensions()
		-- 	if w/sh < h/sh then love.window.fullscreen_offset_x = -(sw - w) / 2
		-- 	else                love.window.fullscreen_offset_y = -(sh - h) / 2
		-- elseif not love.window.getFullscreen()
		-- 	love.window.fullscreen_offset_x, love.window.fullscreen_offset_y = nil, nil
-- 		vudu?.graphics.drawText {0,0,0}, 0, 200, 400, "#{love.system.getOS()} #{if love.window.getFullscreen() then 'fullscreen' else 'not fullscreen'}
-- Desktop: #{love.window.getDesktopDimensions()} #{select 2, love.window.getDesktopDimensions()}
-- Window : #{gr.getWidth()}, #{gr.getHeight()}
-- Original: #{love.mouse.getX()}, #{love.mouse.getY()}
-- Scaled:  #{love.mouse.getPosition()}, #{select 2, love.mouse.getPosition()}
-- Offset: #{love.window.fullscreen_offset_x}, #{love.window.fullscreen_offset_y}", 20, 400

	generate: (n)=>
		with Game(1)
			.field = [ [(if c>0 then c else {})for c in *row] for row in *generate(n)]
			\attach()
	draw: =>
		gr.clear(gr.uipalette.base)
		gr.print_center(gr.setColor(gr.uipalette.text) or gr.setFont(gr.newFlyweightFont($FONT1, 120)) or '数独', @@Layout.title)--140, 20)
		super()
		-- [gr.rectangle('line', unpack b) for b in * {@@Layout.title}]

love.draw = -> -- 省エネモード(アニメーションの毎にinput.idletime=0を挟まなければいけないのでGameシーンのみに限定する)
	self = Scene.current
	if @@__name != 'Game' or input.idletime < 0.1 --[[ or 'battery' != (love.system.getPowerInfo())]] then return love.draw1()
	maid64.clearBG()
	-- if @time
	gr.setCanvas(maid64.canvas) -- 時計の部分だけ更新
	gr.rectangle(gr.setColor(gr.uipalette.base) or 'fill', unpack Game.Layout.time)
	gr.printf(gr.setFont(gr.newFlyweightFont($FONT1)) or gr.setColor(gr.uipalette.text) or"%s %02d:%02d"\format(L'Time', @time |>idiv(60), @time % 60), Game.Layout.time[1], Game.Layout.time[2], Game.Layout.time[3], 'right')
	maid64.finish()
	gr.reset()


-- if DEBUGMODE
-- 	return {
-- 		postYue: ->
-- 			print 'postYue'
-- 	}


love.load = ->
	vudu?.initialize()
	vudu?.initializeDefaultHotkeys()
	Title2()\attach()

	if DEBUGMODE -- hotswap
		Watchdog{
			"#{$FILE}": -> Watchdog.transpile("#{$FILE}", 'main.lua')
			...Watchdog.InitialTargets}
	if DEBUGMODE -- build
		-- os.execute 'rustc -C opt-level=3 --crate-type=cdylib ray.rs' -- android(32bit?)用
		-- os.execute 'rustc -C opt-level=3 --crate-type=cdylib ray.rs' -- Windows用
		-- os.execute 'zig build-lib -dynamic -target arm-linux-gnueabi ray.zig' -- android(32bit?)用
		-- os.execute 'zig build-lib -dynamic -target x86_64-windows ray.zig' -- Windows用
		love.thread.newThread([[
_G.PROJECTNAME, _G.VERSION, description = ...
local distribute = require('distribute')
distribute.build({'sudoku_stagedata.lua', '数独.lua'})
distribute.modify_index_html(require('lib.os_capture').capture('echo \''..description..'\' | pandoc -f markdown -t html'))
]])\start PROJECTNAME, VERSION, [[

<style>body{color: #1a1a20; background-color: #f0f0f0;}</style>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">
<div class=row><div class="off-2"><div class="col m8" style="background-color: #fffbe1">

数独です。

<div class=row>
<div class="col m1-5 card _brown">]]..require('distribute').thumbnail('images/title.png')..[[</div>
<div class="col m1-5 card _brown">]]..require('distribute').thumbnail('images/main.png')..[[</div>
</div>
<br>

### 操作方法{class=_nightblue}

- マウス左ボタンを押して置きたい数字の所に◯を合わせて離す。
  - 長押しで消す。

## Download{class=_warning}

- lastest:
  - [sudoku.exe](sudoku.exe)
  - [sudoku.love](sudoku.love)

## 更新履歴{class=_danger}

- v0.1a 

## License{class=_success}

Zlib/Libpng License.

</div></div></div>
<script src="https://rawgit.com/outboxcraft/beauter/master/beauter.min.js"></script>
]] -- 遅いので別スレッドにした。utlからlume.luaへ書き写したものあり。一行の時ファイル名複数行の時コードと判断してるようだ
